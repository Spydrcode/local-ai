/**
 * Comprehensive Pinecone Vector Setup for Local AI Platform
 *
 * Optimized for all agent categories:
 *
 * üè∞ PORTER INTELLIGENCE STACK (Strategic Analysis)
 * - Porter's Five Forces Analysis
 * - Competitive Moat Analysis
 * - Value Chain Analysis
 * - Strategic Frameworks (SWOT, BMC, GTM)
 *
 * üß† BUSINESS INTELLIGENCE AGENTS
 * - Local Market Analysis
 * - Customer Sentiment Analysis
 * - Economic Intelligence
 * - Business DNA Analysis
 *
 * üìà MARKETING & GROWTH AGENTS
 * - Customer Magnet Posts
 * - Content Calendar
 * - Social Media Analysis
 * - Conversion Analysis
 * - Quick Wins Generator
 *
 * üíé OPTIMIZATION AGENTS
 * - ROI Calculator
 * - Implementation Roadmap
 * - Website Grade Analysis
 * - Brand Analysis
 *
 * Usage:
 *   npm run setup:pinecone-optimized
 *   or
 *   npx tsx scripts/setup-pinecone-optimized.ts
 */

import { Pinecone } from "@pinecone-database/pinecone";
import * as dotenv from "dotenv";
import * as path from "path";

dotenv.config({ path: path.resolve(__dirname, "../.env.local") });

async function setupOptimizedPinecone() {
  const apiKey = process.env.PINECONE_API_KEY;
  const indexName = process.env.PINECONE_INDEX_NAME ?? "local-ai-demos";

  if (!apiKey) {
    console.error("‚ùå PINECONE_API_KEY not found in .env.local");
    console.log("\nPlease add your Pinecone API key:");
    console.log("1. Sign up at https://www.pinecone.io/");
    console.log("2. Create an API key in the console");
    console.log("3. Add to .env.local: PINECONE_API_KEY=your-key-here");
    process.exit(1);
  }

  console.log("üöÄ Setting up Optimized Pinecone for All Local AI Agents...\n");

  const pinecone = new Pinecone({ apiKey });

  try {
    // Check if index exists
    const indexes = await pinecone.listIndexes();
    const existingIndex = indexes.indexes?.find(
      (idx) => idx.name === indexName
    );

    if (existingIndex) {
      console.log(`‚úÖ Index "${indexName}" already exists`);
      console.log(`   Dimension: ${existingIndex.dimension}`);
      console.log(`   Metric: ${existingIndex.metric}`);
      console.log(`   Status: ${existingIndex.status?.state || "unknown"}`);
    } else {
      console.log(`üì¶ Creating new index: ${indexName}...`);

      await pinecone.createIndex({
        name: indexName,
        dimension: 1536, // OpenAI ada-002 embedding size
        metric: "cosine",
        spec: {
          serverless: {
            cloud: "aws",
            region: "us-east-1",
          },
        },
        deletionProtection: "disabled",
      });

      console.log("‚úÖ Index created successfully");
    }

    // Get index stats
    const index = pinecone.index(indexName);
    const stats = await index.describeIndexStats();

    console.log("\nüìä Index Statistics:");
    console.log(`   Total vectors: ${stats.totalRecordCount || 0}`);
    console.log(`   Dimensions: ${stats.dimension}`);
    console.log(
      `   Index fullness: ${((stats.indexFullness || 0) * 100).toFixed(2)}%`
    );

    // Display comprehensive metadata schema
    console.log("\nüóÇÔ∏è  COMPREHENSIVE METADATA SCHEMA:");

    console.log("\nüìã Universal Fields (All Agents):");
    console.log("   ‚úì demoId (string) - Links to demos table");
    console.log(
      "   ‚úì agentType (string) - porter, business_intelligence, marketing, optimization"
    );
    console.log("   ‚úì agentName (string) - Specific agent identifier");
    console.log("   ‚úì analysisType (string) - Specific analysis performed");
    console.log(
      "   ‚úì category (string) - strategic, market, content, optimization"
    );
    console.log("   ‚úì tier (string) - free, pro, consultation");
    console.log("   ‚úì confidence (number) - 0.0-1.0 quality score");
    console.log("   ‚úì timestamp (string) - ISO 8601 datetime");
    console.log("   ‚úì tags (string[]) - Searchable keywords");
    console.log("   ‚úì businessName (string) - For business-specific search");
    console.log("   ‚úì industry (string) - Industry classification");

    console.log("\nüè∞ PORTER INTELLIGENCE STACK:");
    console.log("   üìä Porter's Five Forces:");
    console.log(
      "     ‚Ä¢ porterForce - buyer_power, supplier_power, new_entrants, substitutes, competitive_rivalry"
    );
    console.log(
      "     ‚Ä¢ forceStrength - very_low, low, moderate, high, very_high"
    );
    console.log("     ‚Ä¢ strategicImplication - threat, opportunity, neutral");

    console.log("   üè∞ Competitive Moat:");
    console.log(
      "     ‚Ä¢ moatType - switching_costs, network_effects, economies_of_scale, brand, regulatory"
    );
    console.log("     ‚Ä¢ moatStrength - weak, moderate, strong, very_strong");
    console.log("     ‚Ä¢ defensibility - 0.0-1.0 score");

    console.log("   ‚öôÔ∏è Value Chain:");
    console.log(
      "     ‚Ä¢ chainActivity - inbound_logistics, operations, outbound_logistics, marketing, service"
    );
    console.log("     ‚Ä¢ activityType - primary, support");
    console.log("     ‚Ä¢ costAdvantage - true/false");
    console.log("     ‚Ä¢ differentiationPotential - 0.0-1.0");

    console.log("   üìã Strategic Frameworks:");
    console.log(
      "     ‚Ä¢ frameworkType - swot, business_model_canvas, gtm_strategy"
    );
    console.log(
      "     ‚Ä¢ swotQuadrant - strengths, weaknesses, opportunities, threats"
    );
    console.log(
      "     ‚Ä¢ canvasBlock - customer_segments, value_propositions, channels, etc."
    );
    console.log(
      "     ‚Ä¢ gtmComponent - entry_strategy, channels, pricing, launch_plan"
    );

    console.log("\nüß† BUSINESS INTELLIGENCE AGENTS:");
    console.log("   üìç Local Market Analysis:");
    console.log("     ‚Ä¢ marketScope - local, regional, national");
    console.log("     ‚Ä¢ competitorTier - direct, indirect, substitute");
    console.log("     ‚Ä¢ marketPosition - leader, challenger, follower, nicher");

    console.log("   üí¨ Customer Sentiment:");
    console.log("     ‚Ä¢ sentimentType - reviews, social, surveys, feedback");
    console.log("     ‚Ä¢ sentimentScore - -1.0 to 1.0 (negative to positive)");
    console.log(
      "     ‚Ä¢ emotionType - joy, trust, fear, surprise, sadness, disgust, anger, anticipation"
    );

    console.log("   üìà Economic Intelligence:");
    console.log(
      "     ‚Ä¢ economicIndicator - gdp, inflation, employment, interest_rates"
    );
    console.log(
      "     ‚Ä¢ timeHorizon - current, short_term, medium_term, long_term"
    );
    console.log("     ‚Ä¢ impactLevel - low, moderate, high, critical");

    console.log("\nüìà MARKETING & GROWTH AGENTS:");
    console.log("   üß≤ Customer Magnet Posts:");
    console.log(
      "     ‚Ä¢ contentType - social_proof, educational, behind_scenes, problem_solution"
    );
    console.log(
      "     ‚Ä¢ platform - facebook, instagram, linkedin, twitter, tiktok"
    );
    console.log(
      "     ‚Ä¢ engagementType - likes, shares, comments, clicks, conversions"
    );

    console.log("   üìÖ Content Calendar:");
    console.log(
      "     ‚Ä¢ contentCategory - promotional, educational, entertaining, user_generated"
    );
    console.log("     ‚Ä¢ postingFrequency - daily, weekly, bi_weekly, monthly");
    console.log("     ‚Ä¢ seasonality - evergreen, seasonal, event_based");

    console.log("   ‚ö° Quick Wins:");
    console.log(
      "     ‚Ä¢ actionType - revenue, customer_acquisition, efficiency, competitive"
    );
    console.log("     ‚Ä¢ timeToImplement - immediate, this_week, this_month");
    console.log("     ‚Ä¢ effortLevel - low, medium, high");
    console.log("     ‚Ä¢ expectedImpact - low, medium, high, game_changer");

    console.log("\nüíé OPTIMIZATION AGENTS:");
    console.log("   üí∞ ROI Calculator:");
    console.log(
      "     ‚Ä¢ investmentType - marketing, technology, operations, people"
    );
    console.log(
      "     ‚Ä¢ paybackPeriod - immediate, 3_months, 6_months, 12_months, longer"
    );
    console.log("     ‚Ä¢ riskLevel - low, medium, high");

    console.log("   üéØ Conversion Analysis:");
    console.log(
      "     ‚Ä¢ conversionStage - awareness, interest, consideration, purchase, retention"
    );
    console.log(
      "     ‚Ä¢ optimizationType - funnel, landing_page, checkout, onboarding"
    );

    console.log("   üèÜ Website Grade:");
    console.log(
      "     ‚Ä¢ gradeCategory - performance, seo, accessibility, best_practices"
    );
    console.log("     ‚Ä¢ scoreRange - 90-100, 80-89, 70-79, 60-69, below_60");

    console.log("\nüîç OPTIMIZED VECTOR ID PATTERNS:");

    console.log("\nüè∞ Porter Intelligence Stack:");
    console.log("   ‚Ä¢ {demoId}-porter-forces-{force}");
    console.log("   ‚Ä¢ {demoId}-competitive-moat-{type}");
    console.log("   ‚Ä¢ {demoId}-value-chain-{activity}");
    console.log("   ‚Ä¢ {demoId}-swot-{quadrant}");
    console.log("   ‚Ä¢ {demoId}-bmc-{block}");
    console.log("   ‚Ä¢ {demoId}-gtm-{component}");

    console.log("\nüß† Business Intelligence:");
    console.log("   ‚Ä¢ {demoId}-local-market-{aspect}");
    console.log("   ‚Ä¢ {demoId}-customer-sentiment-{type}");
    console.log("   ‚Ä¢ {demoId}-economic-intel-{indicator}");
    console.log("   ‚Ä¢ {demoId}-business-dna-{trait}");

    console.log("\nüìà Marketing & Growth:");
    console.log("   ‚Ä¢ {demoId}-magnet-posts-{type}");
    console.log("   ‚Ä¢ {demoId}-content-calendar-{period}");
    console.log("   ‚Ä¢ {demoId}-social-analysis-{platform}");
    console.log("   ‚Ä¢ {demoId}-quick-wins-{day}");

    console.log("\nüíé Optimization:");
    console.log("   ‚Ä¢ {demoId}-roi-calc-{investment}");
    console.log("   ‚Ä¢ {demoId}-conversion-{stage}");
    console.log("   ‚Ä¢ {demoId}-website-grade-{category}");
    console.log("   ‚Ä¢ {demoId}-brand-analysis-{component}");

    console.log("\nüîÑ CROSS-AGENT SYNTHESIS VECTORS:");
    console.log("   ‚Ä¢ {demoId}-synthesis-strategic");
    console.log("   ‚Ä¢ {demoId}-synthesis-market");
    console.log("   ‚Ä¢ {demoId}-synthesis-growth");
    console.log("   ‚Ä¢ {demoId}-synthesis-complete");

    console.log("\nüí° SPECIALIZED SEARCH FUNCTIONS:");
    console.log("\n   üè∞ Strategic Intelligence:");
    console.log("   ‚Ä¢ searchPorterForces(demoId, query, force?, topK)");
    console.log("   ‚Ä¢ searchCompetitiveMoat(demoId, query, moatType?, topK)");
    console.log(
      "   ‚Ä¢ searchStrategicFrameworks(demoId, query, framework?, topK)"
    );

    console.log("\n   üß† Business Intelligence:");
    console.log("   ‚Ä¢ searchLocalMarket(demoId, query, scope?, topK)");
    console.log(
      "   ‚Ä¢ searchCustomerSentiment(demoId, query, sentimentType?, topK)"
    );
    console.log("   ‚Ä¢ searchEconomicIntel(demoId, query, indicator?, topK)");

    console.log("\n   üìà Marketing Intelligence:");
    console.log(
      "   ‚Ä¢ searchContentStrategy(demoId, query, contentType?, topK)"
    );
    console.log("   ‚Ä¢ searchSocialInsights(demoId, query, platform?, topK)");
    console.log(
      "   ‚Ä¢ searchQuickWins(demoId, query, actionType?, timeframe?, topK)"
    );

    console.log("\n   üíé Optimization Intelligence:");
    console.log(
      "   ‚Ä¢ searchROIOpportunities(demoId, query, investmentType?, topK)"
    );
    console.log("   ‚Ä¢ searchConversionInsights(demoId, query, stage?, topK)");
    console.log(
      "   ‚Ä¢ searchPerformanceMetrics(demoId, query, category?, topK)"
    );

    console.log("\n   üîÑ Cross-Agent Search:");
    console.log(
      "   ‚Ä¢ searchUnifiedInsights(demoId, query, agentTypes?, minConfidence?, topK)"
    );
    console.log("   ‚Ä¢ getCompleteBusinessContext(demoId) - All agent results");
    console.log(
      "   ‚Ä¢ searchActionableInsights(demoId, query, urgency?, impact?, topK)"
    );

    console.log("\nüéØ OPTIMIZED QUERY EXAMPLES:");

    console.log("\n   Find Strategic Opportunities:");
    console.log("   ```typescript");
    console.log("   const opportunities = await searchUnifiedInsights(");
    console.log("     'demo-123',");
    console.log("     'growth opportunities market expansion',");
    console.log("     ['porter', 'business_intelligence'],");
    console.log("     0.8, // min confidence");
    console.log("     10   // top results");
    console.log("   );");
    console.log("   ```");

    console.log("\n   Find Immediate Action Items:");
    console.log("   ```typescript");
    console.log("   const quickWins = await searchQuickWins(");
    console.log("     'demo-123',");
    console.log("     'increase revenue this week',");
    console.log("     'revenue',");
    console.log("     'this_week',");
    console.log("     5");
    console.log("   );");
    console.log("   ```");

    console.log("\n   Get Complete Business Intelligence:");
    console.log("   ```typescript");
    console.log(
      "   const fullContext = await getCompleteBusinessContext('demo-123');"
    );
    console.log("   // Returns organized insights from all agents:");
    console.log("   // {");
    console.log("   //   strategic: { porter: [...], frameworks: [...] },");
    console.log("   //   intelligence: { market: [...], sentiment: [...] },");
    console.log("   //   marketing: { content: [...], social: [...] },");
    console.log("   //   optimization: { roi: [...], conversion: [...] }");
    console.log("   // }");
    console.log("   ```");

    console.log("\nüìà Performance Optimizations:");
    console.log(
      "   ‚úÖ Granular chunking - Each insight component stored separately"
    );
    console.log(
      "   ‚úÖ Rich metadata filtering - Search by agent, tier, confidence, category"
    );
    console.log(
      "   ‚úÖ Batch upserts - All vectors stored in parallel for speed"
    );
    console.log(
      "   ‚úÖ Semantic clustering - Related insights grouped for better retrieval"
    );
    console.log("   ‚úÖ Cross-agent synthesis - Unified strategic context");
    console.log("   ‚úÖ Confidence scoring - Quality-based result ranking");
    console.log("   ‚úÖ Time-aware search - Recent insights prioritized");
    console.log(
      "   ‚úÖ Business-specific search - Industry and size-aware results"
    );

    console.log("\nüîÑ Integration Architecture:");
    console.log("   üìä Data Flow:");
    console.log("   1. Agent generates analysis ‚Üí JSON structured output");
    console.log("   2. Analysis chunked ‚Üí Individual insights extracted");
    console.log("   3. Insights embedded ‚Üí OpenAI ada-002 vectors");
    console.log("   4. Vectors stored ‚Üí Pinecone with rich metadata");
    console.log("   5. Search queries ‚Üí Semantic + metadata filtering");
    console.log("   6. Results returned ‚Üí Ranked by relevance + confidence");

    console.log("\n   üéØ Agent Categories:");
    console.log("   ‚Ä¢ Strategic Layer: Porter Intelligence Stack (Pro tier)");
    console.log(
      "   ‚Ä¢ Intelligence Layer: Market & sentiment analysis (Free + Pro)"
    );
    console.log("   ‚Ä¢ Marketing Layer: Content & growth strategies (Pro tier)");
    console.log(
      "   ‚Ä¢ Optimization Layer: Performance & ROI analysis (Pro + Consultation)"
    );

    console.log("\n‚úÖ Comprehensive Pinecone optimization complete!");
    console.log(`   Index name: ${indexName}`);
    console.log(
      `   Vector provider: ${process.env.VECTOR_PROVIDER || "supabase (default)"}`
    );
    console.log(
      "   Set VECTOR_PROVIDER=pinecone in .env.local to use Pinecone"
    );

    console.log("\nüìö Next Steps:");
    console.log(
      "   1. Run any agent analysis - vectors auto-stored with optimized metadata"
    );
    console.log("   2. Use specialized search functions for targeted insights");
    console.log("   3. Build dashboards with vector-powered context");
    console.log("   4. Enable cross-agent synthesis for unified intelligence");
    console.log("   5. Monitor performance with confidence scoring");
    console.log("   6. Scale with business-specific and industry-aware search");

    console.log(
      "\nüéâ Your Pinecone index is now optimized for all Local AI agents!"
    );
    console.log("   Ready for strategic intelligence at scale! üöÄ");
  } catch (error) {
    console.error("‚ùå Error setting up optimized Pinecone:", error);
    if (error instanceof Error) {
      console.error(error.message);
    }
    process.exit(1);
  }
}

// Run if called directly
if (require.main === module) {
  setupOptimizedPinecone();
}

export { setupOptimizedPinecone };
